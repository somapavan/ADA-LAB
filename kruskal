//kruskal
#include<iostream>
using namespace std;
int i,j,a,b,u,v,n,ne=1;
int min,mincost=0,cost[9][9],parent[9];
int find(int i){
    while(parent[i])
    i=parent[i];
    return i;
}
int unit(int i,int j){
    if(i!=j){
        parent[j]=i;
        return 1;
    }
    return 0;
}
void kruskal(){
    while(ne<n){
        int min=999;
        for(i=1;i<=n;i++){
            for(j=1;j<=n;j++){
                if(cost[i][j]<min){
                    min=cost[i][j];
                    a=u=i;
                    b=v=j;
                }
            }
        }
        u=find(u);
        v=find(v);
        if(unit(u,v)){
            cout<<ne<<"unit("<<a<<","<<b<<")="<<min<<endl;
            ne++;
            mincost+=min;
        }
        cost[a][b]=cost[b][a]=999;
    }
    cout<<"tatal is:"<<mincost<<endl;
}
int main(){
    cout<<"enter the no of vertices:"<<endl;
    cin>>n;
    cout<<"enter the matrix:"<<endl;
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            cin>>cost[i][j];
            if(cost[i][j]==0)
            cost[i][j]=999;
        }
    }
    kruskal();
    return 0;
}
